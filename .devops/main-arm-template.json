{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "serviceName": {
      "type": "string"
    },
    "environment": {
      "type": "string",
      "allowedValues": [
        "prod",
        "dev",
        "test",
        "qa",
        "uat"
      ],
      "defaultValue": "dev"
    }
  },
  "variables": {
    "environmentSuffix": "[if(equals(parameters('environment'),'prod'), '', concat('-', parameters('environment')))]",

    "storageName": "[toLower(replace(concat(parameters('serviceName'),'storage',variables('environmentSuffix')),'-',''))]",
    "appInsightsName": "[concat(parameters('serviceName'), '-ai', variables('environmentSuffix'))]",
    "functionsPlanName": "[concat(parameters('serviceName'), '-func-asp', variables('environmentSuffix'))]",
    "functionsAppName": "[concat(parameters('serviceName'), '-func', variables('environmentSuffix'))]",

    "keyVaultName": "[concat(parameters('serviceName'), '-kv', variables('environmentSuffix'))]",

    "cosmosAccountName": "[concat(parameters('serviceName'), '-cosmos', variables('environmentSuffix'))]",
    "cosmosAccountTag": "[if(equals(parameters('environment'),'prod'), 'Production', 'Non-Production')]",

    "tenantId": "[subscription().tenantId]"
  },
  "resources": [

    {
      "apiVersion": "2019-06-01",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageName')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "Environment": "[parameters('environment')]"
      },
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": true
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2016-10-01",
      "name": "[concat(variables('keyVaultName'), '/Storage--AccessKey')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageName')), '2019-06-01').keys[0].value]",
        "attributes": {
          "enabled": true
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2016-10-01",
      "name": "[concat(variables('keyVaultName'), '/Storage--ConnectionString')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageName')), '2019-06-01').keys[0].value,';EndpointSuffix=','core.windows.net')]",

        "attributes": {
          "enabled": true
        }
      }
    },

    {
      "type": "Microsoft.DocumentDb/databaseAccounts",
      "apiVersion": "2020-04-01",
      "name": "[variables('cosmosAccountName')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "Environment": "[parameters('environment')]",
        "defaultExperience": "Core (SQL)",
        "hidden-cosmos-mmspecial": "",
        "CosmosAccountType": "[variables('cosmosAccountTag')]"
      },
      "kind": "GlobalDocumentDB",
      "properties": {
        "databaseAccountOfferType": "Standard",
        "locations": [
          {
            "id": "[concat(variables('cosmosAccountName'), '-', resourceGroup().location)]",
            "failoverPriority": 0,
            "locationName": "[resourceGroup().location]"
          }
        ],
        "capabilities": [],
        "backupPolicy": {
          "type": "Periodic",
          "periodicModeProperties": {
            "backupIntervalInMinutes": 240,
            "backupRetentionIntervalInHours": 8
          }
        },
        "isVirtualNetworkFilterEnabled": false,
        "virtualNetworkRules": [],
        "ipRules": [],
        "dependsOn": [],
        "enableMultipleWriteLocations": false,
        "enableFreeTier": false
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2016-10-01",
      "name": "[concat(variables('keyVaultName'), '/CosmosDb--ConnectionString')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "value": "[listConnectionStrings(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosAccountName')), '2019-12-12').connectionStrings[0].connectionString]",
        "attributes": {
          "enabled": true
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2016-10-01",
      "name": "[concat(variables('keyVaultName'), '/CosmosDb--AccountKey')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "value": "[listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosAccountName')), '2019-12-12').primaryMasterKey]",
        "attributes": {
          "enabled": true
        }
      }
    },

    {
      "apiVersion": "2015-05-01",
      "name": "[variables('appInsightsName')]",
      "type": "Microsoft.Insights/components",
      "location": "[resourceGroup().location]",
      "tags": {
        "Environment": "[parameters('environment')]"
      },
      "properties": {
        "ApplicationId": "[variables('appInsightsName')]",
        "Request_Source": "IbizaWebAppExtensionCreate"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2018-02-01",
      "name": "[variables('functionsPlanName')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "Environment": "[parameters('environment')]"
      },
      "sku": {
        "name": "Y1",
        "tier": "Dynamic",
        "size": "Y1",
        "family": "Y",
        "capacity": 0
      },
      "kind": "functionapp",
      "properties": {
        "perSiteScaling": false,
        "maximumElasticWorkerCount": 1,
        "isSpot": false,
        "reserved": false,
        "isXenon": false,
        "hyperV": false,
        "targetWorkerCount": 0,
        "targetWorkerSizeId": 0
      }
    },

    {
      "apiVersion": "2015-08-01",
      "type": "Microsoft.Web/sites",
      "name": "[variables('functionsAppName')]",
      "tags": {
        "Environment": "[parameters('environment')]"
      },
      "location": "[resourceGroup().location]",
      "kind": "functionapp",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('functionsPlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))]"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('functionsPlanName'))]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "AzureWebJobsDashboard",
			  "value": "[concat('@Microsoft.KeyVault(VaultName=', variables('keyVaultName'), ';SecretName=Storage--ConnectionString)')]"
            },
            {
              "name": "AzureWebJobsStorage",
			  "value": "[concat('@Microsoft.KeyVault(VaultName=', variables('keyVaultName'), ';SecretName=Storage--ConnectionString)')]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('@Microsoft.KeyVault(VaultName=', variables('keyVaultName'), ';SecretName=Storage--ConnectionString)')]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[concat(toLower(variables('functionsAppName')), '-341d')]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2014-04-01').InstrumentationKey]"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "ASPNETCORE_ENVIRONMENT",
              "value": "[if(equals(parameters('environment'), 'prod'), 'Production', if(equals(parameters('environment'),'uat'),'Staging', 'Development'))]"
            },
            {
              "name": "AZURE_TENANT_ID",
              "value": "[subscription().tenantId]"
            },
            {
              "name": "KeyVaultUrl",
              "value": "[concat('https://', variables('keyVaultName'), '.vault.azure.net/')]"
            },
            {
              "name": "CosmosDbConnectionString",
              "value": "[concat('@Microsoft.KeyVault(VaultName=', variables('keyVaultName'), ';SecretName=CosmosDb--ConnectionString)')]"
            }
          ]
        }
      }
    },

    {
      "type": "Microsoft.KeyVault/vaults/accessPolicies",
      "name": "[concat(variables('keyVaultName'), '/add')]",
      "apiVersion": "2016-10-01",
      "properties": {
        "accessPolicies": [
          {
            "tenantId": "[variables('tenantId')]",
            "objectId": "[reference(concat('Microsoft.Web/sites/', variables('functionsAppName')), '2016-08-01', 'Full').identity.principalId]",
            "permissions": {
              "keys": [ "all" ],
              "secrets": [ "all" ],
              "certificates": [ "all" ],
              "storage": [ "all" ]
            }
          }
        ]
      }
    }
  ]
}
